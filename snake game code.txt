Main class
===================
from turtle import Screen, Turtle
from snake import Snake
from food import Food
from scoreboard import ScoreBoard
import time


screen = Screen()
screen.setup(width=600, height=600)
screen.bgcolor("black")
screen.title("My Snake Game")
screen.tracer(0)


snake_obj = Snake()
food_obj=Food()
score_board_obj=ScoreBoard()
screen.listen()
screen.onkey(snake_obj.up, "Up")
screen.onkey(snake_obj.down, "Down")
screen.onkey(key='Left',  fun= snake_obj.left)
screen.onkey(key='Right',  fun= snake_obj.right)

game_is_on = True
while game_is_on:
    screen.update()
    time.sleep(0.1)
    snake_obj.move_snake()

    # Detect Collision with Food
    if snake_obj.head.distance(food_obj)<15:
        food_obj.new_food()
        snake_obj.extend()
        # print("Collision")
        score_board_obj.increase_score()

    # Detect Collision with any of 4 Walls
    if snake_obj.head.xcor() >280 or snake_obj.head.xcor() <-280 or snake_obj.head.ycor() >280 or snake_obj.head.ycor() <-280:
        score_board_obj.endgame()
        game_is_on=False

    # Detect Collision with Own


    for segment in snake_obj.segments:
        if segment==snake_obj.head:
            pass
        elif snake_obj.head.distance(segment) <10:

            game_is_on=False
            score_board_obj.endgame()

screen.exitonclick()
============================
Snake class
============================
from turtle import Screen, Turtle
import time

STARTING_POSITION = [(0, 0), (-20, 0), (-40, 0)]
MOVE_DISTANCE = 20
UP=90
DOWN=270
LEFT=180
RIGHT=0


class Snake:
    def __init__(self):
        self.segments = []
        self.create_snake()
        self.head=self.segments[0]

    def create_snake(self):
        for position in STARTING_POSITION:
            self.add_segment(position)

    def add_segment(self,position):
        new_segment = Turtle("square")
        new_segment.color("white")
        new_segment.penup()
        new_segment.goto(position)
        self.segments.append(new_segment)

    def extend(self):
        self.add_segment(self.segments[-1].position())

    def move_snake(self):
        for seg_num in range(len(self.segments)-1, 0, -1):
            new_x = self.segments[seg_num-1].xcor()
            new_y = self.segments[seg_num-1].ycor()
            self.segments[seg_num].goto(new_x, new_y)
        self.head.forward(MOVE_DISTANCE)
        # self.segments[0].left(90)

    def up(self):
        if self.head.heading() != DOWN:
            self.head.setheading(UP)

    def down(self):
        if self.head.heading() != UP:
            self.head.setheading(DOWN)

    def left(self):
        if self.head.heading() != RIGHT:
            self.head.setheading(LEFT)

    def right(self):
        if self.head.heading() != LEFT:
            self.head.setheading(RIGHT)

====================
Food class
====================
from turtle import Turtle
import random
# from snake import Snake


class Food(Turtle):
    def __init__(self):
        super().__init__()
        self.shape("circle")
        self.penup()
        self.shapesize()
        self.speed("fastest")
        self.color("blue")
        self.new_food()

    def new_food(self):
        random_x=random.randint(-280,280)
        random_y=random.randint(-280,280)
        self.goto(random_x,random_y)

=====================
Scoreboard class
=====================
from turtle import Turtle
ALIGNMENT="center"
FONT=("Courier", 24, "normal")


class ScoreBoard(Turtle):

    def __init__(self):
        super().__init__()
        self.score=0
        self.goto(0,260)
        self.hideturtle()
        self.color("white")
        self.penup()
        self.calculate_scoreboard()
        # self.write(f"Score :{self.score}",align="center",font=("Arial", 24, "normal"))

    def calculate_scoreboard(self):
        self.write(f"Score : {self.score}", align=ALIGNMENT, font=FONT)

    def increase_score(self):
        self.score +=1
        self.clear()
        self.calculate_scoreboard()
        # self.write(f"Score :{self.score}",align="center",font=("Arial", 24, "normal"))

    def endgame(self):
        # self.clear()
        self.goto(0,0)
        self.write("Game Over", align=ALIGNMENT, font=FONT)




